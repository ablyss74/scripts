# Building qjackctl Clear Linux

# Optional method to test this is to run everything in docker.  But is not required.
# Test in docker 
echo -e 'FROM clearlinux:latest \nRUN swupd bundle-add curl c-basic qt5-dev devpkg-jack2 devpkg-jack2 os-utils-gui-dev' > /tmp/Dockerfile && docker build -t clearlinux:latest < /tmp/Dockerfile - && modprobe snd-seq && xhost local:${USER} && docker run -it --privileged -e JACK_NO_AUDIO_RESERVATION=1  --device /dev/snd -e PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native -v ${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native -v /dev/shm:/dev/shm:rw --net=host -e DISPLAY=${DISPLAY} clearlinux:latest


swupd bundle-add curl c-basic qt5-dev devpkg-jack2 devpkg-jack2 os-utils-gui-dev

# Build Jack
curl -OL https://github.com/jackaudio/jack2/archive/v1.9.21.tar.gz
# cd <jack build directory>
./waf configure
./waf
./waf install

# Build Qjackctl
git clone https://git.code.sf.net/p/qjackctl/code qjackctl-git
# cd <qjackctl build directory>
cmake -B build
cmake --build build
cmake --install build

# Set the system in realtime mode
echo "-1" > /proc/sys/kernel/sched_rt_runtime_us
# load kernel module snd_seq for midi mapping
modprobe snd_seq
# Tell qjackctl to use /usr/local/lib 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/

# Run 
qjackctl


#Buld rakarrack
git clone git://rakarrack.git.sourceforge.net/gitroot/rakarrack/rakarrack
cd <rakarrack build directory>
./autogen.sh
./configure
make
make install

# Run
rakarrack

